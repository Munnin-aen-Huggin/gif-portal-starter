{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["module","exports","TWITTER_LINK","TEST_GIFS","SystemProgram","web3","arr","Keypair","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","fromSecretKey","programID","PublicKey","idl","metadata","address","network","clusterApiUrl","opts","App","useState","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","checkIfWalletIsConnected","a","window","solana","isPhantom","console","log","connect","onlyIfTrusted","response","publicKey","toString","alert","error","connectWallet","onInputChange","event","value","target","getProvider","connection","Connection","Provider","createGifAccount","provider","program","Program","rpc","startStuffOff","accounts","user","wallet","systemProgram","programId","signers","getGifList","account","fetch","useEffect","sendGif","length","addGif","onLoad","addEventListener","removeEventListener","className","onClick","onSubmit","preventDefault","type","placeholder","onChange","map","item","index","key","src","gifLink","alt","twitterLogo","href","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eade624c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/twitter-logo.5c97ee2a.svg\";","import React, { useEffect, useState } from 'react';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport './App.css';\nimport { Connection, PublicKey, clusterApiUrl} from '@solana/web3.js';\nimport {\n  Program, Provider, web3\n} from '@project-serum/anchor';\n\nimport idl from './idl.json';\nimport kp from './keypair.json'\n\n// Constants\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst TEST_GIFS = [\n  'https://media.giphy.com/media/fW5nKIZV763BnkpWeC/giphy.gif',\n  'https://media.giphy.com/media/tyXrGdlS3l9vxicBle/giphy.gif',\n  'https://media.giphy.com/media/QxMb25h7RhitNWgyy0/giphy.gif',\n  'https://media.giphy.com/media/XEdgJpPEZPDqI2HVm3/giphy.gif',\n  'https://media.giphy.com/media/1AjEeS0UFnj6DzaDbz/giphy.gif',\n  'https://media.giphy.com/media/Y3HUh2JiXrjPulXkN1/giphy.gif'\n]\n// SystemProgram is a reference to the Solana runtime!\nconst { SystemProgram, Keypair } = web3;\n\n// Create a keypair for the account that will hold the GIF data.\nconst arr = Object.values(kp._keypair.secretKey)\nconst secret = new Uint8Array(arr)\nconst baseAccount = web3.Keypair.fromSecretKey(secret)\n\n// Get our program's id from the IDL file.\nconst programID = new PublicKey(idl.metadata.address);\n\n// Set our network to devnet.\nconst network = clusterApiUrl('devnet');\n\n// Controls how we want to acknowledge when a transaction is \"done\".\nconst opts = {\n  preflightCommitment: \"processed\"\n}\n\n\nconst App = () => {\n  // State\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [gifList, setGifList] = useState([]);\n\n  // Actions\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log('Phantom wallet found!');\n          const response = await solana.connect({ onlyIfTrusted: true });\n          console.log(\n            'Connected with Public Key:',\n            response.publicKey.toString()\n          );\n\n          /*\n           * Set the user's publicKey in state to be used later!\n           */\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet 👻');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    const {solana} = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log('Connected with Public Key:', response.publicKey.toString());\n    }\n  };\n\n  const onInputChange = event => {\n    const {value} = event.target;\n    setInputValue(value);\n  };\n\nconst getProvider = () => {\n  const connection = new Connection(network, opts.preflightCommitment);\n  const provider = new Provider(\n    connection, window.solana, opts.preflightCommitment,\n  );\n  return provider;\n}\n\nconst createGifAccount = async () => {\n  try {\n    const provider = getProvider();\n    const program = new Program(idl, programID, provider);\n    console.log(\"ping\")\n    await program.rpc.startStuffOff({\n      accounts: {\n        baseAccount: baseAccount.publicKey,\n        user: provider.wallet.publicKey,\n        systemProgram: SystemProgram.programId,\n      },\n      signers: [baseAccount]\n    });\n    console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString())\n    await getGifList();\n\n  } catch(error) {\n    console.log(\"Error creating BaseAccount account:\", error)\n  }\n}\n\n// Get gifList\nconst getGifList = async() => {\n  try {\n    const provider = getProvider();\n    const program = new Program(idl, programID, provider);\n    const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n    \n    console.log(\"Got the account\", account)\n    setGifList(account.gifList)\n\n  } catch (error) {\n    console.log(\"Error in getGifList: \", error)\n    setGifList(null);\n  }\n}\n\nuseEffect(() => {\n  if (walletAddress) {\n    console.log('Fetching GIF list...');\n    getGifList()\n  }\n}, [walletAddress]);\nconst sendGif = async () => {\n  if (inputValue.length === 0) {\n    console.log(\"No gif link given!\")\n    return\n  }\n  setInputValue('');\n  console.log('Gif link:', inputValue);\n  try {\n    const provider = getProvider();\n    const program = new Program(idl, programID, provider);\n\n    await program.rpc.addGif(inputValue, {\n      accounts: {\n        baseAccount: baseAccount.publicKey,\n        user: provider.wallet.publicKey,\n      },\n    });\n    console.log(\"GIF successfully sent to program\", inputValue)\n\n    await getGifList();\n  } catch (error) {\n    console.log(\"Error sending GIF:\", error)\n  }\n};\n\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  //connected render \n  \n  const renderConnectedContainer = () => {\n    // If we hit this, it means the program account hasn't been initialized.\n      if (gifList === null) {\n        return (\n          <div className=\"connected-container\">\n            <button className=\"cta-button submit-gif-button\" onClick={createGifAccount}>\n              Do One-Time Initialization For GIF Program Account\n            </button>\n          </div>\n        )\n      } \n      // Otherwise, we're good! Account exists. User can submit GIFs.\n      else {\n        return(\n          <div className=\"connected-container\">\n            <form\n              onSubmit={(event) => {\n                event.preventDefault();\n                sendGif();\n              }}\n            >\n              <input\n                type=\"text\"\n                placeholder=\"Enter gif link!\"\n                value={inputValue}\n                onChange={onInputChange}\n              />\n              <button type=\"submit\" className=\"cta-button submit-gif-button\">\n                Submit\n              </button>\n            </form>\n            <div className=\"gif-grid\">\n              {/* We use index as the key instead, also, the src is now item.gifLink */}\n              {gifList.map((item, index) => (\n                <div className=\"gif-item\" key={index}>\n                  <img src={item.gifLink} />\n                </div>\n              ))}\n            </div>\n          </div>\n        )\n      }\n    }\n\n  // UseEffects\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n\n useEffect(() => {\n   if (walletAddress) {\n     console.log('Fetching GIF list...');\n     // Call SOL program here\n\n     //Set State\n     setGifList(TEST_GIFS);\n   }\n }, [walletAddress]);\n\n  return (\n    <div className=\"App\">\n\t\t\t{/* This was solely added for some styling fanciness */}\n\t\t\t<div className={walletAddress ? 'authed-container' : 'container'}>\n        <div className=\"header-container\">\n          <p className=\"header\">Stamford Bridge's Blue's</p>\n          <p className=\"sub-text\">\n            KBTFF 🟦⬜️\n          </p>\n          {/* Add the condition to show this only if we don't have a wallet address */}\n          {!walletAddress && renderNotConnectedContainer()}\n          {/*Add connection for connected wallet render*/}\n          {walletAddress && renderConnectedContainer()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}